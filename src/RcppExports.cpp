// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// flow_val_covid19
NumericVector flow_val_covid19(NumericVector x, NumericVector u);
RcppExport SEXP _UnbiasedMultilevel_flow_val_covid19(SEXP xSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(flow_val_covid19(x, u));
    return rcpp_result_gen;
END_RCPP
}
// flow_grad_x0_covid19
NumericMatrix flow_grad_x0_covid19(NumericVector x, NumericVector u);
RcppExport SEXP _UnbiasedMultilevel_flow_grad_x0_covid19(SEXP xSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(flow_grad_x0_covid19(x, u));
    return rcpp_result_gen;
END_RCPP
}
// flow_grad_param_covid19
NumericMatrix flow_grad_param_covid19(NumericVector x, NumericVector u);
RcppExport SEXP _UnbiasedMultilevel_flow_grad_param_covid19(SEXP xSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(flow_grad_param_covid19(x, u));
    return rcpp_result_gen;
END_RCPP
}
// flow_vec
NumericVector flow_vec(NumericVector x, NumericVector u);
RcppExport SEXP _UnbiasedMultilevel_flow_vec(SEXP xSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(flow_vec(x, u));
    return rcpp_result_gen;
END_RCPP
}
// Single_Time_Step_Explicit_covid19
NumericVector Single_Time_Step_Explicit_covid19(double dt, NumericVector x, NumericVector u, NumericVector wvec, NumericMatrix dmat);
RcppExport SEXP _UnbiasedMultilevel_Single_Time_Step_Explicit_covid19(SEXP dtSEXP, SEXP xSEXP, SEXP uSEXP, SEXP wvecSEXP, SEXP dmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wvec(wvecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    rcpp_result_gen = Rcpp::wrap(Single_Time_Step_Explicit_covid19(dt, x, u, wvec, dmat));
    return rcpp_result_gen;
END_RCPP
}
// init_weight_vector_covid19
NumericVector init_weight_vector_covid19();
RcppExport SEXP _UnbiasedMultilevel_init_weight_vector_covid19() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(init_weight_vector_covid19());
    return rcpp_result_gen;
END_RCPP
}
// init_d_matrix_covid19
NumericMatrix init_d_matrix_covid19();
RcppExport SEXP _UnbiasedMultilevel_init_d_matrix_covid19() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(init_d_matrix_covid19());
    return rcpp_result_gen;
END_RCPP
}
// init_weight_vector_high_order_covid19
NumericVector init_weight_vector_high_order_covid19();
RcppExport SEXP _UnbiasedMultilevel_init_weight_vector_high_order_covid19() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(init_weight_vector_high_order_covid19());
    return rcpp_result_gen;
END_RCPP
}
// init_d_matrix_high_order_covid19
NumericMatrix init_d_matrix_high_order_covid19();
RcppExport SEXP _UnbiasedMultilevel_init_d_matrix_high_order_covid19() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(init_d_matrix_high_order_covid19());
    return rcpp_result_gen;
END_RCPP
}
// forward_simulation_covid19
NumericVector forward_simulation_covid19(NumericVector x0, NumericVector u, double tf, double tstep);
RcppExport SEXP _UnbiasedMultilevel_forward_simulation_covid19(SEXP x0SEXP, SEXP uSEXP, SEXP tfSEXP, SEXP tstepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type tf(tfSEXP);
    Rcpp::traits::input_parameter< double >::type tstep(tstepSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_simulation_covid19(x0, u, tf, tstep));
    return rcpp_result_gen;
END_RCPP
}
// forward_simulation_output_covid19
NumericMatrix forward_simulation_output_covid19(NumericVector param, int l);
RcppExport SEXP _UnbiasedMultilevel_forward_simulation_output_covid19(SEXP paramSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_simulation_output_covid19(param, l));
    return rcpp_result_gen;
END_RCPP
}
// observation_covid19
NumericVector observation_covid19(NumericVector u, int l);
RcppExport SEXP _UnbiasedMultilevel_observation_covid19(SEXP uSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_covid19(u, l));
    return rcpp_result_gen;
END_RCPP
}
// observation_grad_covid19
NumericMatrix observation_grad_covid19(NumericVector u, int l);
RcppExport SEXP _UnbiasedMultilevel_observation_grad_covid19(SEXP uSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_grad_covid19(u, l));
    return rcpp_result_gen;
END_RCPP
}
// inner_product_inverseproblem
double inner_product_inverseproblem(NumericVector x0, NumericVector x1);
RcppExport SEXP _UnbiasedMultilevel_inner_product_inverseproblem(SEXP x0SEXP, SEXP x1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    rcpp_result_gen = Rcpp::wrap(inner_product_inverseproblem(x0, x1));
    return rcpp_result_gen;
END_RCPP
}
// mat_inner_product_inverseproblem
double mat_inner_product_inverseproblem(NumericMatrix mle, NumericVector x0, NumericVector x1);
RcppExport SEXP _UnbiasedMultilevel_mat_inner_product_inverseproblem(SEXP mleSEXP, SEXP x0SEXP, SEXP x1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    rcpp_result_gen = Rcpp::wrap(mat_inner_product_inverseproblem(mle, x0, x1));
    return rcpp_result_gen;
END_RCPP
}
// compute_alpha_inverseproblem
double compute_alpha_inverseproblem(NumericMatrix mle, NumericVector d, NumericVector r);
RcppExport SEXP _UnbiasedMultilevel_compute_alpha_inverseproblem(SEXP mleSEXP, SEXP dSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_alpha_inverseproblem(mle, d, r));
    return rcpp_result_gen;
END_RCPP
}
// compute_beta_inverseproblem
double compute_beta_inverseproblem(NumericMatrix mle, NumericVector d, NumericVector rcg);
RcppExport SEXP _UnbiasedMultilevel_compute_beta_inverseproblem(SEXP mleSEXP, SEXP dSEXP, SEXP rcgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rcg(rcgSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_beta_inverseproblem(mle, d, rcg));
    return rcpp_result_gen;
END_RCPP
}
// sparse_mat_vec_mult_inverseproblem
NumericVector sparse_mat_vec_mult_inverseproblem(NumericMatrix mle, NumericVector x);
RcppExport SEXP _UnbiasedMultilevel_sparse_mat_vec_mult_inverseproblem(SEXP mleSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_mat_vec_mult_inverseproblem(mle, x));
    return rcpp_result_gen;
END_RCPP
}
// inverse_u_vec_inverseproblem
NumericVector inverse_u_vec_inverseproblem(NumericMatrix umat, NumericVector x);
RcppExport SEXP _UnbiasedMultilevel_inverse_u_vec_inverseproblem(SEXP umatSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type umat(umatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_u_vec_inverseproblem(umat, x));
    return rcpp_result_gen;
END_RCPP
}
// inverse_l_vec_inverseproblem
NumericVector inverse_l_vec_inverseproblem(NumericMatrix lmat, NumericVector x);
RcppExport SEXP _UnbiasedMultilevel_inverse_l_vec_inverseproblem(SEXP lmatSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lmat(lmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_l_vec_inverseproblem(lmat, x));
    return rcpp_result_gen;
END_RCPP
}
// sparse_u_factor_inverseproblem
NumericMatrix sparse_u_factor_inverseproblem(NumericMatrix mle);
RcppExport SEXP _UnbiasedMultilevel_sparse_u_factor_inverseproblem(SEXP mleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_u_factor_inverseproblem(mle));
    return rcpp_result_gen;
END_RCPP
}
// sparse_l_factor_inverseproblem
NumericMatrix sparse_l_factor_inverseproblem(NumericMatrix mle);
RcppExport SEXP _UnbiasedMultilevel_sparse_l_factor_inverseproblem(SEXP mleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_l_factor_inverseproblem(mle));
    return rcpp_result_gen;
END_RCPP
}
// linear_solver_inverseproblem
NumericVector linear_solver_inverseproblem(NumericMatrix mle, NumericVector b);
RcppExport SEXP _UnbiasedMultilevel_linear_solver_inverseproblem(SEXP mleSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_solver_inverseproblem(mle, b));
    return rcpp_result_gen;
END_RCPP
}
// cg_solver_inverseproblem
NumericVector cg_solver_inverseproblem(NumericMatrix mle, NumericVector b);
RcppExport SEXP _UnbiasedMultilevel_cg_solver_inverseproblem(SEXP mleSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cg_solver_inverseproblem(mle, b));
    return rcpp_result_gen;
END_RCPP
}
// compute_matrix_dimension_inverseproblem
int compute_matrix_dimension_inverseproblem(int nx);
RcppExport SEXP _UnbiasedMultilevel_compute_matrix_dimension_inverseproblem(SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_matrix_dimension_inverseproblem(nx));
    return rcpp_result_gen;
END_RCPP
}
// init_system_matrix_inverseproblem
NumericMatrix init_system_matrix_inverseproblem(NumericVector param, int nx);
RcppExport SEXP _UnbiasedMultilevel_init_system_matrix_inverseproblem(SEXP paramSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(init_system_matrix_inverseproblem(param, nx));
    return rcpp_result_gen;
END_RCPP
}
// init_right_part_inverseproblem
NumericVector init_right_part_inverseproblem(NumericVector param, int nx);
RcppExport SEXP _UnbiasedMultilevel_init_right_part_inverseproblem(SEXP paramSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(init_right_part_inverseproblem(param, nx));
    return rcpp_result_gen;
END_RCPP
}
// numerical_solution_inverseproblem
NumericVector numerical_solution_inverseproblem(NumericVector param, int nx);
RcppExport SEXP _UnbiasedMultilevel_numerical_solution_inverseproblem(SEXP paramSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_solution_inverseproblem(param, nx));
    return rcpp_result_gen;
END_RCPP
}
// exact_solution_inverseproblem
NumericVector exact_solution_inverseproblem(NumericVector param, int nx);
RcppExport SEXP _UnbiasedMultilevel_exact_solution_inverseproblem(SEXP paramSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_solution_inverseproblem(param, nx));
    return rcpp_result_gen;
END_RCPP
}
// numerical_solution_values_inverseproblem
NumericVector numerical_solution_values_inverseproblem(NumericVector x, int nval);
RcppExport SEXP _UnbiasedMultilevel_numerical_solution_values_inverseproblem(SEXP xSEXP, SEXP nvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nval(nvalSEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_solution_values_inverseproblem(x, nval));
    return rcpp_result_gen;
END_RCPP
}
// l2_norm_inverseproblem
double l2_norm_inverseproblem(NumericVector param, int l);
RcppExport SEXP _UnbiasedMultilevel_l2_norm_inverseproblem(SEXP paramSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_norm_inverseproblem(param, l));
    return rcpp_result_gen;
END_RCPP
}
// init_system_matrix_derivative_inverseproblem
NumericMatrix init_system_matrix_derivative_inverseproblem(NumericVector param, NumericVector pgrad, int nx);
RcppExport SEXP _UnbiasedMultilevel_init_system_matrix_derivative_inverseproblem(SEXP paramSEXP, SEXP pgradSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pgrad(pgradSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(init_system_matrix_derivative_inverseproblem(param, pgrad, nx));
    return rcpp_result_gen;
END_RCPP
}
// init_right_part_derivative_inverseproblem
NumericVector init_right_part_derivative_inverseproblem(NumericVector param, NumericVector pgrad, int nx);
RcppExport SEXP _UnbiasedMultilevel_init_right_part_derivative_inverseproblem(SEXP paramSEXP, SEXP pgradSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pgrad(pgradSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(init_right_part_derivative_inverseproblem(param, pgrad, nx));
    return rcpp_result_gen;
END_RCPP
}
// numerical_solution_derivative_inverseproblem
NumericVector numerical_solution_derivative_inverseproblem(NumericVector param, NumericVector pgrad, int nx);
RcppExport SEXP _UnbiasedMultilevel_numerical_solution_derivative_inverseproblem(SEXP paramSEXP, SEXP pgradSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pgrad(pgradSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_solution_derivative_inverseproblem(param, pgrad, nx));
    return rcpp_result_gen;
END_RCPP
}
// observation_points_inverseproblem
NumericVector observation_points_inverseproblem(int nvec);
RcppExport SEXP _UnbiasedMultilevel_observation_points_inverseproblem(SEXP nvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nvec(nvecSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_points_inverseproblem(nvec));
    return rcpp_result_gen;
END_RCPP
}
// observation_inverseproblem
NumericVector observation_inverseproblem(NumericVector param, int l);
RcppExport SEXP _UnbiasedMultilevel_observation_inverseproblem(SEXP paramSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_inverseproblem(param, l));
    return rcpp_result_gen;
END_RCPP
}
// observation_grad_val_inverseproblem
NumericVector observation_grad_val_inverseproblem(NumericVector param, int l, int m);
RcppExport SEXP _UnbiasedMultilevel_observation_grad_val_inverseproblem(SEXP paramSEXP, SEXP lSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_grad_val_inverseproblem(param, l, m));
    return rcpp_result_gen;
END_RCPP
}
// observation_grad_inverseproblem
NumericMatrix observation_grad_inverseproblem(NumericVector param, int l);
RcppExport SEXP _UnbiasedMultilevel_observation_grad_inverseproblem(SEXP paramSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_grad_inverseproblem(param, l));
    return rcpp_result_gen;
END_RCPP
}
// inner_product_toyexample
double inner_product_toyexample(NumericVector x0, NumericVector x1);
RcppExport SEXP _UnbiasedMultilevel_inner_product_toyexample(SEXP x0SEXP, SEXP x1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    rcpp_result_gen = Rcpp::wrap(inner_product_toyexample(x0, x1));
    return rcpp_result_gen;
END_RCPP
}
// mat_inner_product_toyexample
double mat_inner_product_toyexample(NumericMatrix mle, NumericVector x0, NumericVector x1);
RcppExport SEXP _UnbiasedMultilevel_mat_inner_product_toyexample(SEXP mleSEXP, SEXP x0SEXP, SEXP x1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x1(x1SEXP);
    rcpp_result_gen = Rcpp::wrap(mat_inner_product_toyexample(mle, x0, x1));
    return rcpp_result_gen;
END_RCPP
}
// compute_alpha_toyexample
double compute_alpha_toyexample(NumericMatrix mle, NumericVector d, NumericVector r);
RcppExport SEXP _UnbiasedMultilevel_compute_alpha_toyexample(SEXP mleSEXP, SEXP dSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_alpha_toyexample(mle, d, r));
    return rcpp_result_gen;
END_RCPP
}
// compute_beta_toyexample
double compute_beta_toyexample(NumericMatrix mle, NumericVector d, NumericVector rcg);
RcppExport SEXP _UnbiasedMultilevel_compute_beta_toyexample(SEXP mleSEXP, SEXP dSEXP, SEXP rcgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rcg(rcgSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_beta_toyexample(mle, d, rcg));
    return rcpp_result_gen;
END_RCPP
}
// sparse_mat_vec_mult_toyexample
NumericVector sparse_mat_vec_mult_toyexample(NumericMatrix mle, NumericVector x);
RcppExport SEXP _UnbiasedMultilevel_sparse_mat_vec_mult_toyexample(SEXP mleSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_mat_vec_mult_toyexample(mle, x));
    return rcpp_result_gen;
END_RCPP
}
// inverse_u_vec_toyexample
NumericVector inverse_u_vec_toyexample(NumericMatrix umat, NumericVector x);
RcppExport SEXP _UnbiasedMultilevel_inverse_u_vec_toyexample(SEXP umatSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type umat(umatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_u_vec_toyexample(umat, x));
    return rcpp_result_gen;
END_RCPP
}
// inverse_l_vec_toyexample
NumericVector inverse_l_vec_toyexample(NumericMatrix lmat, NumericVector x);
RcppExport SEXP _UnbiasedMultilevel_inverse_l_vec_toyexample(SEXP lmatSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lmat(lmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_l_vec_toyexample(lmat, x));
    return rcpp_result_gen;
END_RCPP
}
// sparse_u_factor_toyexample
NumericMatrix sparse_u_factor_toyexample(NumericMatrix mle);
RcppExport SEXP _UnbiasedMultilevel_sparse_u_factor_toyexample(SEXP mleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_u_factor_toyexample(mle));
    return rcpp_result_gen;
END_RCPP
}
// sparse_l_factor_toyexample
NumericMatrix sparse_l_factor_toyexample(NumericMatrix mle);
RcppExport SEXP _UnbiasedMultilevel_sparse_l_factor_toyexample(SEXP mleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_l_factor_toyexample(mle));
    return rcpp_result_gen;
END_RCPP
}
// linear_solver_direct_toyexample
NumericVector linear_solver_direct_toyexample(NumericMatrix mle, NumericVector d);
RcppExport SEXP _UnbiasedMultilevel_linear_solver_direct_toyexample(SEXP mleSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_solver_direct_toyexample(mle, d));
    return rcpp_result_gen;
END_RCPP
}
// linear_solver_toyexample
NumericVector linear_solver_toyexample(NumericMatrix mle, NumericVector b);
RcppExport SEXP _UnbiasedMultilevel_linear_solver_toyexample(SEXP mleSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_solver_toyexample(mle, b));
    return rcpp_result_gen;
END_RCPP
}
// cg_solver_toyexample
NumericVector cg_solver_toyexample(NumericMatrix mle, NumericVector b);
RcppExport SEXP _UnbiasedMultilevel_cg_solver_toyexample(SEXP mleSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mle(mleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cg_solver_toyexample(mle, b));
    return rcpp_result_gen;
END_RCPP
}
// compute_matrix_dimension_toyexample
int compute_matrix_dimension_toyexample(int nx);
RcppExport SEXP _UnbiasedMultilevel_compute_matrix_dimension_toyexample(SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_matrix_dimension_toyexample(nx));
    return rcpp_result_gen;
END_RCPP
}
// init_system_matrix_toyexample
NumericMatrix init_system_matrix_toyexample(NumericVector param, int nx);
RcppExport SEXP _UnbiasedMultilevel_init_system_matrix_toyexample(SEXP paramSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(init_system_matrix_toyexample(param, nx));
    return rcpp_result_gen;
END_RCPP
}
// init_right_part_toyexample
NumericVector init_right_part_toyexample(NumericVector param, int nx);
RcppExport SEXP _UnbiasedMultilevel_init_right_part_toyexample(SEXP paramSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(init_right_part_toyexample(param, nx));
    return rcpp_result_gen;
END_RCPP
}
// numerical_solution_toyexample
NumericVector numerical_solution_toyexample(NumericVector param, int nx);
RcppExport SEXP _UnbiasedMultilevel_numerical_solution_toyexample(SEXP paramSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_solution_toyexample(param, nx));
    return rcpp_result_gen;
END_RCPP
}
// exact_solution_toyexample
NumericVector exact_solution_toyexample(NumericVector param, int nx);
RcppExport SEXP _UnbiasedMultilevel_exact_solution_toyexample(SEXP paramSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_solution_toyexample(param, nx));
    return rcpp_result_gen;
END_RCPP
}
// numerical_solution_values_toyexample
NumericVector numerical_solution_values_toyexample(NumericVector x, int nval);
RcppExport SEXP _UnbiasedMultilevel_numerical_solution_values_toyexample(SEXP xSEXP, SEXP nvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nval(nvalSEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_solution_values_toyexample(x, nval));
    return rcpp_result_gen;
END_RCPP
}
// l2_norm_toyexample
double l2_norm_toyexample(NumericVector param, int l);
RcppExport SEXP _UnbiasedMultilevel_l2_norm_toyexample(SEXP paramSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_norm_toyexample(param, l));
    return rcpp_result_gen;
END_RCPP
}
// init_system_matrix_derivative_toyexample
NumericMatrix init_system_matrix_derivative_toyexample(NumericVector param, NumericVector pgrad, int nx);
RcppExport SEXP _UnbiasedMultilevel_init_system_matrix_derivative_toyexample(SEXP paramSEXP, SEXP pgradSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pgrad(pgradSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(init_system_matrix_derivative_toyexample(param, pgrad, nx));
    return rcpp_result_gen;
END_RCPP
}
// init_right_part_derivative_toyexample
NumericVector init_right_part_derivative_toyexample(NumericVector param, NumericVector pgrad, int nx);
RcppExport SEXP _UnbiasedMultilevel_init_right_part_derivative_toyexample(SEXP paramSEXP, SEXP pgradSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pgrad(pgradSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(init_right_part_derivative_toyexample(param, pgrad, nx));
    return rcpp_result_gen;
END_RCPP
}
// numerical_solution_derivative_toyexample
NumericVector numerical_solution_derivative_toyexample(NumericVector param, NumericVector pgrad, int nx);
RcppExport SEXP _UnbiasedMultilevel_numerical_solution_derivative_toyexample(SEXP paramSEXP, SEXP pgradSEXP, SEXP nxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pgrad(pgradSEXP);
    Rcpp::traits::input_parameter< int >::type nx(nxSEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_solution_derivative_toyexample(param, pgrad, nx));
    return rcpp_result_gen;
END_RCPP
}
// observation_points_toyexample
NumericVector observation_points_toyexample(int nvec);
RcppExport SEXP _UnbiasedMultilevel_observation_points_toyexample(SEXP nvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nvec(nvecSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_points_toyexample(nvec));
    return rcpp_result_gen;
END_RCPP
}
// observation_toyexample
NumericVector observation_toyexample(NumericVector param, int l);
RcppExport SEXP _UnbiasedMultilevel_observation_toyexample(SEXP paramSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_toyexample(param, l));
    return rcpp_result_gen;
END_RCPP
}
// observation_grad_val_toyexample
NumericVector observation_grad_val_toyexample(NumericVector param, int l, int m);
RcppExport SEXP _UnbiasedMultilevel_observation_grad_val_toyexample(SEXP paramSEXP, SEXP lSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_grad_val_toyexample(param, l, m));
    return rcpp_result_gen;
END_RCPP
}
// observation_grad_toyexample
NumericMatrix observation_grad_toyexample(NumericVector param, int l);
RcppExport SEXP _UnbiasedMultilevel_observation_grad_toyexample(SEXP paramSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(observation_grad_toyexample(param, l));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_UnbiasedMultilevel_flow_val_covid19", (DL_FUNC) &_UnbiasedMultilevel_flow_val_covid19, 2},
    {"_UnbiasedMultilevel_flow_grad_x0_covid19", (DL_FUNC) &_UnbiasedMultilevel_flow_grad_x0_covid19, 2},
    {"_UnbiasedMultilevel_flow_grad_param_covid19", (DL_FUNC) &_UnbiasedMultilevel_flow_grad_param_covid19, 2},
    {"_UnbiasedMultilevel_flow_vec", (DL_FUNC) &_UnbiasedMultilevel_flow_vec, 2},
    {"_UnbiasedMultilevel_Single_Time_Step_Explicit_covid19", (DL_FUNC) &_UnbiasedMultilevel_Single_Time_Step_Explicit_covid19, 5},
    {"_UnbiasedMultilevel_init_weight_vector_covid19", (DL_FUNC) &_UnbiasedMultilevel_init_weight_vector_covid19, 0},
    {"_UnbiasedMultilevel_init_d_matrix_covid19", (DL_FUNC) &_UnbiasedMultilevel_init_d_matrix_covid19, 0},
    {"_UnbiasedMultilevel_init_weight_vector_high_order_covid19", (DL_FUNC) &_UnbiasedMultilevel_init_weight_vector_high_order_covid19, 0},
    {"_UnbiasedMultilevel_init_d_matrix_high_order_covid19", (DL_FUNC) &_UnbiasedMultilevel_init_d_matrix_high_order_covid19, 0},
    {"_UnbiasedMultilevel_forward_simulation_covid19", (DL_FUNC) &_UnbiasedMultilevel_forward_simulation_covid19, 4},
    {"_UnbiasedMultilevel_forward_simulation_output_covid19", (DL_FUNC) &_UnbiasedMultilevel_forward_simulation_output_covid19, 2},
    {"_UnbiasedMultilevel_observation_covid19", (DL_FUNC) &_UnbiasedMultilevel_observation_covid19, 2},
    {"_UnbiasedMultilevel_observation_grad_covid19", (DL_FUNC) &_UnbiasedMultilevel_observation_grad_covid19, 2},
    {"_UnbiasedMultilevel_inner_product_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_inner_product_inverseproblem, 2},
    {"_UnbiasedMultilevel_mat_inner_product_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_mat_inner_product_inverseproblem, 3},
    {"_UnbiasedMultilevel_compute_alpha_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_compute_alpha_inverseproblem, 3},
    {"_UnbiasedMultilevel_compute_beta_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_compute_beta_inverseproblem, 3},
    {"_UnbiasedMultilevel_sparse_mat_vec_mult_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_sparse_mat_vec_mult_inverseproblem, 2},
    {"_UnbiasedMultilevel_inverse_u_vec_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_inverse_u_vec_inverseproblem, 2},
    {"_UnbiasedMultilevel_inverse_l_vec_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_inverse_l_vec_inverseproblem, 2},
    {"_UnbiasedMultilevel_sparse_u_factor_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_sparse_u_factor_inverseproblem, 1},
    {"_UnbiasedMultilevel_sparse_l_factor_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_sparse_l_factor_inverseproblem, 1},
    {"_UnbiasedMultilevel_linear_solver_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_linear_solver_inverseproblem, 2},
    {"_UnbiasedMultilevel_cg_solver_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_cg_solver_inverseproblem, 2},
    {"_UnbiasedMultilevel_compute_matrix_dimension_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_compute_matrix_dimension_inverseproblem, 1},
    {"_UnbiasedMultilevel_init_system_matrix_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_init_system_matrix_inverseproblem, 2},
    {"_UnbiasedMultilevel_init_right_part_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_init_right_part_inverseproblem, 2},
    {"_UnbiasedMultilevel_numerical_solution_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_numerical_solution_inverseproblem, 2},
    {"_UnbiasedMultilevel_exact_solution_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_exact_solution_inverseproblem, 2},
    {"_UnbiasedMultilevel_numerical_solution_values_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_numerical_solution_values_inverseproblem, 2},
    {"_UnbiasedMultilevel_l2_norm_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_l2_norm_inverseproblem, 2},
    {"_UnbiasedMultilevel_init_system_matrix_derivative_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_init_system_matrix_derivative_inverseproblem, 3},
    {"_UnbiasedMultilevel_init_right_part_derivative_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_init_right_part_derivative_inverseproblem, 3},
    {"_UnbiasedMultilevel_numerical_solution_derivative_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_numerical_solution_derivative_inverseproblem, 3},
    {"_UnbiasedMultilevel_observation_points_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_observation_points_inverseproblem, 1},
    {"_UnbiasedMultilevel_observation_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_observation_inverseproblem, 2},
    {"_UnbiasedMultilevel_observation_grad_val_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_observation_grad_val_inverseproblem, 3},
    {"_UnbiasedMultilevel_observation_grad_inverseproblem", (DL_FUNC) &_UnbiasedMultilevel_observation_grad_inverseproblem, 2},
    {"_UnbiasedMultilevel_inner_product_toyexample", (DL_FUNC) &_UnbiasedMultilevel_inner_product_toyexample, 2},
    {"_UnbiasedMultilevel_mat_inner_product_toyexample", (DL_FUNC) &_UnbiasedMultilevel_mat_inner_product_toyexample, 3},
    {"_UnbiasedMultilevel_compute_alpha_toyexample", (DL_FUNC) &_UnbiasedMultilevel_compute_alpha_toyexample, 3},
    {"_UnbiasedMultilevel_compute_beta_toyexample", (DL_FUNC) &_UnbiasedMultilevel_compute_beta_toyexample, 3},
    {"_UnbiasedMultilevel_sparse_mat_vec_mult_toyexample", (DL_FUNC) &_UnbiasedMultilevel_sparse_mat_vec_mult_toyexample, 2},
    {"_UnbiasedMultilevel_inverse_u_vec_toyexample", (DL_FUNC) &_UnbiasedMultilevel_inverse_u_vec_toyexample, 2},
    {"_UnbiasedMultilevel_inverse_l_vec_toyexample", (DL_FUNC) &_UnbiasedMultilevel_inverse_l_vec_toyexample, 2},
    {"_UnbiasedMultilevel_sparse_u_factor_toyexample", (DL_FUNC) &_UnbiasedMultilevel_sparse_u_factor_toyexample, 1},
    {"_UnbiasedMultilevel_sparse_l_factor_toyexample", (DL_FUNC) &_UnbiasedMultilevel_sparse_l_factor_toyexample, 1},
    {"_UnbiasedMultilevel_linear_solver_direct_toyexample", (DL_FUNC) &_UnbiasedMultilevel_linear_solver_direct_toyexample, 2},
    {"_UnbiasedMultilevel_linear_solver_toyexample", (DL_FUNC) &_UnbiasedMultilevel_linear_solver_toyexample, 2},
    {"_UnbiasedMultilevel_cg_solver_toyexample", (DL_FUNC) &_UnbiasedMultilevel_cg_solver_toyexample, 2},
    {"_UnbiasedMultilevel_compute_matrix_dimension_toyexample", (DL_FUNC) &_UnbiasedMultilevel_compute_matrix_dimension_toyexample, 1},
    {"_UnbiasedMultilevel_init_system_matrix_toyexample", (DL_FUNC) &_UnbiasedMultilevel_init_system_matrix_toyexample, 2},
    {"_UnbiasedMultilevel_init_right_part_toyexample", (DL_FUNC) &_UnbiasedMultilevel_init_right_part_toyexample, 2},
    {"_UnbiasedMultilevel_numerical_solution_toyexample", (DL_FUNC) &_UnbiasedMultilevel_numerical_solution_toyexample, 2},
    {"_UnbiasedMultilevel_exact_solution_toyexample", (DL_FUNC) &_UnbiasedMultilevel_exact_solution_toyexample, 2},
    {"_UnbiasedMultilevel_numerical_solution_values_toyexample", (DL_FUNC) &_UnbiasedMultilevel_numerical_solution_values_toyexample, 2},
    {"_UnbiasedMultilevel_l2_norm_toyexample", (DL_FUNC) &_UnbiasedMultilevel_l2_norm_toyexample, 2},
    {"_UnbiasedMultilevel_init_system_matrix_derivative_toyexample", (DL_FUNC) &_UnbiasedMultilevel_init_system_matrix_derivative_toyexample, 3},
    {"_UnbiasedMultilevel_init_right_part_derivative_toyexample", (DL_FUNC) &_UnbiasedMultilevel_init_right_part_derivative_toyexample, 3},
    {"_UnbiasedMultilevel_numerical_solution_derivative_toyexample", (DL_FUNC) &_UnbiasedMultilevel_numerical_solution_derivative_toyexample, 3},
    {"_UnbiasedMultilevel_observation_points_toyexample", (DL_FUNC) &_UnbiasedMultilevel_observation_points_toyexample, 1},
    {"_UnbiasedMultilevel_observation_toyexample", (DL_FUNC) &_UnbiasedMultilevel_observation_toyexample, 2},
    {"_UnbiasedMultilevel_observation_grad_val_toyexample", (DL_FUNC) &_UnbiasedMultilevel_observation_grad_val_toyexample, 3},
    {"_UnbiasedMultilevel_observation_grad_toyexample", (DL_FUNC) &_UnbiasedMultilevel_observation_grad_toyexample, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_UnbiasedMultilevel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
